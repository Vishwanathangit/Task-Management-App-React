# Code Repository Snapshot: Task Management App

--------------------------------------------
Generated with reposnap v1.3.0
Project: https://github.com/akhshyganesh/reposnap#readme
Author: akhshyganesh
Generated on: 15/5/2025 at 11:33:24 pm
--------------------------------------------


📄 README.md
  ---
  # React + Vite
  
  This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.
  
  Currently, two official plugins are available:
  
  - [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) for Fast Refresh
  - [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh
  
  ## Expanding the ESLint configuration
  
  If you are developing a production application, we recommend using TypeScript with type-aware lint rules enabled. Check out the [TS template](https://github.com/vitejs/vite/tree/main/packages/create-vite/template-react-ts) for information on how to integrate TypeScript and [`typescript-eslint`](https://typescript-eslint.io) in your project.
  
  ---

📄 eslint.config.js
  ---
  import js from '@eslint/js'
  import globals from 'globals'
  import reactHooks from 'eslint-plugin-react-hooks'
  import reactRefresh from 'eslint-plugin-react-refresh'
  
  export default [
    { ignores: ['dist'] },
    {
      files: ['**/*.{js,jsx}'],
      languageOptions: {
        ecmaVersion: 2020,
        globals: globals.browser,
        parserOptions: {
          ecmaVersion: 'latest',
          ecmaFeatures: { jsx: true },
          sourceType: 'module',
        },
      },
      plugins: {
        'react-hooks': reactHooks,
        'react-refresh': reactRefresh,
      },
      rules: {
        ...js.configs.recommended.rules,
        ...reactHooks.configs.recommended.rules,
        'no-unused-vars': ['error', { varsIgnorePattern: '^[A-Z_]' }],
        'react-refresh/only-export-components': [
          'warn',
          { allowConstantExport: true },
        ],
      },
    },
  ]
  
  ---

📄 index.html
  ---
  <!doctype html>
  <html lang="en">
  
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" href="./src/assets/images/icon.png">
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Task Management App</title>
  </head>
  
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
  
  </html>
  ---

📁 public/
📁 src/
  📄 App.css
    ---
    
    ---

  📄 App.jsx
    ---
    import { useState } from 'react'
    import React from 'react'
    import './App.css'
    import Home from './pages/Home'
    import AddTask from './pages/AddTask'
    import EditTask from './pages/EditTask'
    import { BrowserRouter, Routes, Route, Navigate } from 'react-router-dom'
    
    
    function App() {
     
     return (
        <BrowserRouter>
          <Routes>
            <Route path='/' element={<Home />}></Route>
            <Route path='/AddTask' element={<AddTask />}></Route>
             <Route path='/edit/:id' element={<EditTask />} />
            <Route path='*' element={<Navigate to="/" />} />
          </Routes>
        </BrowserRouter>
      )
    }
    
    export default App
    
    ---

  📁 assets/
    📁 images/
  📄 data.jsx
    ---
    export const getTasks = () => {
      const data = localStorage.getItem("tasks")
      return data ? JSON.parse(data) : []
    }
    
    export const saveTasks = (tasks) => {
      localStorage.setItem("tasks", JSON.stringify(tasks))
    }
    ---

  📄 index.css
    ---
    @import "tailwindcss"; 
    ---

  📄 main.jsx
    ---
    import { StrictMode } from 'react'
    import React from 'react'
    import { createRoot } from 'react-dom/client'
    import './index.css'
    import App from './App.jsx'
    
    createRoot(document.getElementById('root')).render(
      <StrictMode>
        <App />
      </StrictMode>,
    )
    
    ---

  📁 pages/
    📄 AddTask.jsx
      ---
      import React, { useState } from 'react';
      import { getTasks, saveTasks } from '../data';
      import { useNavigate } from 'react-router-dom';
      
      const AddTask = () => {
        const navigate = useNavigate();
        const [title, setTitle] = useState('');
        const [description, setDescription] = useState('');
        const [dueDate, setDueDate] = useState('');
        const [status, setStatus] = useState('Pending');
      
        const handleSubmit = (e) => {
          e.preventDefault();
      
          if (!title || !description || !dueDate || !status) {
            alert('Please fill out all fields.');
            return;
          }
      
          const newTask = {
            id: Date.now(),
            title,
            description,
            dueDate,
            status,
          };
      
          const tasks = getTasks();
          tasks.push(newTask);
          saveTasks(tasks);
      
          alert('Task added successfully!');
          navigate('/');
        };
      
        const handleBack = (event) => {
          event.preventDefault();
          navigate('/');
        };
      
        return (
          <div className="container mx-auto p-6 max-w-lg">
            <h1 className="text-3xl font-bold text-gray-800 mb-6">Add New Task</h1>
            <button
              onClick={handleBack}
              className="bg-gray-500 text-white px-4 py-2 rounded-md hover:bg-gray-600 transition mb-4 cursor-pointer"
            >
              Back
            </button>
            <form onSubmit={handleSubmit} className="space-y-4">
              <div>
                <input
                  type="text"
                  value={title}
                  onChange={(e) => setTitle(e.target.value)}
                  placeholder="Title"
                  className="w-full border border-gray-300 rounded-md px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>
              <div>
                <textarea
                  value={description}
                  onChange={(e) => setDescription(e.target.value)}
                  placeholder="Description"
                  className="w-full border border-gray-300 rounded-md px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 resize-vertical"
                  rows="4"
                />
              </div>
              <div>
                <input
                  type="date"
                  value={dueDate}
                  onChange={(e) => setDueDate(e.target.value)}
                  className="w-full border border-gray-300 rounded-md px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 cursor-pointer"
                />
              </div>
              <div>
                <select
                  value={status}
                  onChange={(e) => setStatus(e.target.value)}
                  className="w-full border border-gray-300 rounded-md px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 cursor-pointer"
                >
                  <option value="Pending">Pending</option>
                  <option value="Completed">Completed</option>
                </select>
              </div>
              <button
                type="submit"
                className="w-full bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 transition cursor-pointer"
              >
                Submit
              </button>
            </form>
          </div>
        );
      };
      
      export default AddTask;
      ---

    📄 EditTask.jsx
      ---
      import React, { useEffect, useState } from 'react';
      import { useNavigate, useParams } from 'react-router-dom';
      import { getTasks, saveTasks } from '../data';
      
      const EditTask = () => {
        const { id } = useParams();
        const navigate = useNavigate();
        const [task, setTask] = useState(null);
      
        useEffect(() => {
          const tasks = getTasks();
          const taskToEdit = tasks.find(t => t.id === Number(id));
          if (taskToEdit) {
            setTask(taskToEdit);
          } else {
            alert('Task not found');
            navigate('/');
          }
        }, [id, navigate]);
      
        const handleSubmit = (e) => {
          e.preventDefault();
      
          const tasks = getTasks().map(t =>
            t.id === Number(id) ? task : t
          );
      
          saveTasks(tasks);
          alert('Task updated!');
          navigate('/');
        };
      
        const handleChange = (e) => {
          const { name, value } = e.target;
          setTask(prev => ({ ...prev, [name]: value }));
        };
      
        return (
          task && (
            <div className="container mx-auto p-6 max-w-lg">
              <h1 className="text-3xl font-bold text-gray-800 mb-6">Edit Task</h1>
              <form onSubmit={handleSubmit} className="space-y-4">
                <div>
                  <input
                    type="text"
                    name="title"
                    value={task.title}
                    onChange={handleChange}
                    placeholder="Title"
                    className="w-full border border-gray-300 rounded-md px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>
                <div>
                  <textarea
                    name="description"
                    value={task.description}
                    onChange={handleChange}
                    placeholder="Description"
                    className="w-full border border-gray-300 rounded-md px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 resize-vertical"
                    rows="4"
                  />
                </div>
                <div>
                  <input
                    type="date"
                    name="dueDate"
                    value={task.dueDate}
                    onChange={handleChange}
                    className="w-full border border-gray-300 rounded-md px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                  />
                </div>
                <div>
                  <select
                    name="status"
                    value={task.status}
                    onChange={handleChange}
                    className="w-full border border-gray-300 rounded-md px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
                  >
                    <option value="Pending">Pending</option>
                    <option value="Completed">Completed</option>
                  </select>
                </div>
                <button
                  type="submit"
                  className="w-full bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 transition"
                >
                  Update Task
                </button>
              </form>
            </div>
          )
        );
      };
      
      export default EditTask;
      ---

    📄 Home.jsx
      ---
      import React, { useEffect, useState } from 'react';
      import { useNavigate } from 'react-router-dom';
      import { getTasks, saveTasks } from '../data';
      
      const Home = () => {
        const [tasks, setTasks] = useState([]);
        const [searchTerm, setSearchTerm] = useState('');
        const [filterDate, setFilterDate] = useState('');
        const [filterStatus, setFilterStatus] = useState('');
        const [currentPage, setCurrentPage] = useState(1);
      
        const tasksPerPage = 5;
        const navigate = useNavigate();
      
        useEffect(() => {
          const storedTasks = getTasks();
          const tasksWithStatus = storedTasks.map(task => ({
            ...task,
            status: task.status || 'Pending',
          }));
          setTasks(tasksWithStatus);
        }, []);
      
        const handleAddTask = () => {
          navigate('/AddTask');
        };
      
        const handleEdit = (id) => {
          navigate(`/edit/${id}`);
        };
      
        const handleDelete = (id) => {
          const updatedTasks = tasks.filter(task => task.id !== id);
          setTasks(updatedTasks);
          saveTasks(updatedTasks);
        };
      
        const filteredTasks = tasks.filter(task => {
          const matchesSearch =
            task.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
            task.description.toLowerCase().includes(searchTerm.toLowerCase());
      
          const matchesDate = filterDate ? task.dueDate === filterDate : true;
          const matchesStatus = filterStatus ? task.status === filterStatus : true;
      
          return matchesSearch && matchesDate && matchesStatus;
        });
      
        const indexOfLastTask = currentPage * tasksPerPage;
        const indexOfFirstTask = indexOfLastTask - tasksPerPage;
        const currentTasks = filteredTasks.slice(indexOfFirstTask, indexOfLastTask);
        const totalPages = Math.ceil(filteredTasks.length / tasksPerPage);
      
        const paginate = (pageNumber) => setCurrentPage(pageNumber);
      
        return (
          <div className="container mx-auto p-6 max-w-4xl">
            <h1 className="text-3xl font-bold text-gray-800 mb-6">Task List</h1>
            <button
              onClick={handleAddTask}
              className="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 transition mb-6 cursor-pointer"
            >
              Add Task
            </button>
      
            <div className="flex flex-col sm:flex-row gap-4 mb-6">
              <input
                type="text"
                placeholder="Search by title or description"
                value={searchTerm}
                onChange={(e) => { setSearchTerm(e.target.value); setCurrentPage(1); }}
                className="border border-gray-300 rounded-md px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 flex-1"
              />
              <input
                type="date"
                value={filterDate}
                onChange={(e) => { setFilterDate(e.target.value); setCurrentPage(1); }}
                className="border border-gray-300 rounded-md px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 cursor-pointer"
              />
              <select
                value={filterStatus}
                onChange={(e) => { setFilterStatus(e.target.value); setCurrentPage(1); }}
                className="border border-gray-300 rounded-md px-4 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500 cursor-pointer"
              >
                <option value="">All Status</option>
                <option value="Pending">Pending</option>
                <option value="Completed">Completed</option>
              </select>
            </div>
      
            <div className="overflow-x-auto">
              <table className="w-full border-collapse bg-white shadow-md rounded-lg">
                <thead>
                  <tr className="bg-gray-100">
                    <th className="border border-gray-200 px-4 py-2 text-left">Title</th>
                    <th className="border border-gray-200 px-4 py-2 text-left">Description</th>
                    <th className="border border-gray-200 px-4 py-2 text-left">Due Date</th>
                    <th className="border border-gray-200 px-4 py-2 text-left">Status</th>
                    <th className="border border-gray-200 px-4 py-2 text-left">Edit</th>
                    <th className="border border-gray-200 px-4 py-2 text-left">Delete</th>
                  </tr>
                </thead>
                <tbody>
                  {currentTasks.length === 0 ? (
                    <tr>
                      <td colSpan="6" className="text-center py-4 text-gray-500">
                        No tasks found
                      </td>
                    </tr>
                  ) : (
                    currentTasks.map(task => (
                      <tr key={task.id} className="hover:bg-gray-50">
                        <td className="border border-gray-200 px-4 py-2">{task.title}</td>
                        <td className="border border-gray-200 px-4 py-2">{task.description}</td>
                        <td className="border border-gray-200 px-4 py-2">{task.dueDate}</td>
                        <td className="border border-gray-200 px-4 py-2">
                          <span className={`px-2 py-1 rounded-full text-sm ${
                            task.status === 'Completed' ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'
                          }`}>
                            {task.status || 'Pending'}
                          </span>
                        </td>
                        <td className="border border-gray-200 px-4 py-2">
                          <button
                            onClick={() => handleEdit(task.id)}
                            className="bg-yellow-500 text-white px-3 py-1 rounded-md hover:bg-yellow-600 transition cursor-pointer"
                          >
                            Edit
                          </button>
                        </td>
                        <td className="border border-gray-200 px-4 py-2">
                          <button
                            onClick={() => handleDelete(task.id)}
                            className="bg-red-500 text-white px-3 py-1 rounded-md hover:bg-red-600 transition cursor-pointer"
                          >
                            Delete
                          </button>
                        </td>
                      </tr>
                    ))
                  )}
                </tbody>
              </table>
            </div>
      
            {totalPages > 1 && (
              <div className="flex justify-center gap-2 mt-6">
                {Array.from({ length: totalPages }, (_, index) => (
                  <button
                    key={index + 1}
                    onClick={() => paginate(index + 1)}
                    className={` cursor-pointer px-4 py-2 rounded-md transition ${
                      currentPage === index + 1
                        ? 'bg-blue-600 text-white'
                        : 'bg-gray-200 text-gray-800 hover:bg-gray-300'
                    }`}
                  >
                    {index + 1}
                  </button>
                ))}
              </div>
            )}
          </div>
        );
      };
      
      export default Home;
      ---

📄 vite.config.js
  ---
  import { defineConfig } from 'vite'
  import tailwindcss from '@tailwindcss/vite'
  export default defineConfig({
    plugins: [
      tailwindcss(),
    ],
  })
  ---


# Snapshot Summary
Total files processed: 12
